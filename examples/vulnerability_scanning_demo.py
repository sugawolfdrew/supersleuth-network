#!/usr/bin/env python3
"""
Vulnerability Scanning Integration Demo

This example demonstrates how Claude Code can orchestrate multiple vulnerability
scanners, correlate results, and generate comprehensive reports.
"""

import json
from datetime import datetime

# Import vulnerability scanner integrations
from src.integrations.openvas import quick_scan as openvas_quick_scan
from src.integrations.nessus import perform_scan as nessus_scan
from src.integrations.qualys import run_vulnerability_scan as qualys_scan

# Import correlation and reporting
from src.core.vulnerability_correlation import correlate_scanner_results, calculate_risk_priority
from src.core.vulnerability_reporting import generate_vulnerability_report, prioritize_remediation

# Import CVE database
from src.diagnostics.cve_database import search_cve_by_id, calculate_risk_score


def demonstrate_vulnerability_scanning():
    """
    Demonstrate comprehensive vulnerability scanning workflow.
    
    This shows how Claude Code would orchestrate multiple scanners,
    correlate results, and produce actionable reports.
    """
    print("=" * 80)
    print("SuperSleuth Network - Vulnerability Scanning Demo")
    print("=" * 80)
    print()
    
    # Target configuration
    target_host = "192.168.1.100"
    target_network = "192.168.1.0/24"
    
    print(f"üéØ Target: {target_host}")
    print(f"üåê Network: {target_network}")
    print()
    
    # Scanner configurations (would be provided by IT professional)
    scanner_configs = {
        'openvas': {
            'host': 'openvas.local',
            'username': 'admin',
            'password': 'admin'
        },
        'nessus': {
            'host': 'nessus.local',
            'access_key': 'your-access-key',
            'secret_key': 'your-secret-key'
        },
        'qualys': {
            'platform_url': 'https://qualysapi.qualys.com',
            'username': 'your-username',
            'password': 'your-password'
        }
    }
    
    # Simulate scanner results (in production, these would be real API calls)
    print("üîç Running vulnerability scans...")
    print()
    
    # Simulated OpenVAS results
    openvas_results = [
        {
            'vulnerability_id': 'openvas-001',
            'name': 'Apache Log4j Remote Code Execution (CVE-2021-44228)',
            'description': 'Critical vulnerability in Apache Log4j allowing remote code execution',
            'host': target_host,
            'port': 8080,
            'severity': 10.0,
            'severity_label': 'CRITICAL',
            'cve': 'CVE-2021-44228',
            'solution': 'Update Log4j to version 2.17.0 or later',
            'detection_method': 'Version detection and proof of concept'
        },
        {
            'vulnerability_id': 'openvas-002',
            'name': 'SSH Weak Key Exchange Algorithms',
            'description': 'SSH server supports weak key exchange algorithms',
            'host': target_host,
            'port': 22,
            'severity': 5.0,
            'severity_label': 'MEDIUM',
            'solution': 'Disable weak algorithms in SSH configuration'
        }
    ]
    
    # Simulated Nessus results
    nessus_results = [
        {
            'vulnerability_id': 'nessus-156984',
            'plugin_id': 156984,
            'name': 'Apache Log4j < 2.15.0 Remote Code Execution',
            'description': 'The version of Apache Log4j on the remote host is affected by RCE',
            'host': target_host,
            'port': 8080,
            'severity': 4,  # Nessus uses 0-4 scale
            'severity_label': 'CRITICAL',
            'cve': ['CVE-2021-44228'],
            'cvss_score': 10.0,
            'solution': 'Upgrade to Apache Log4j version 2.15.0 or later',
            'exploit_available': True,
            'exploitability_ease': 'Exploits are available'
        },
        {
            'vulnerability_id': 'nessus-124567',
            'plugin_id': 124567,
            'name': 'SSL/TLS: Certificate Signed Using Weak Hashing Algorithm',
            'description': 'The SSL certificate has been signed using a weak hashing algorithm',
            'host': target_host,
            'port': 443,
            'severity': 2,
            'severity_label': 'MEDIUM',
            'cvss_score': 5.3,
            'solution': 'Replace certificate with one using SHA-256 or better'
        }
    ]
    
    # Simulated Qualys results
    qualys_results = [
        {
            'vulnerability_id': 'qualys-38739',
            'qid': 38739,
            'name': 'Apache Log4j Remote Code Execution Vulnerability (Log4Shell)',
            'description': 'Remote code execution vulnerability in Apache Log4j',
            'host': target_host,
            'port': 8080,
            'severity': 5,  # Qualys uses 1-5 scale
            'severity_label': 'CRITICAL',
            'cve': ['CVE-2021-44228', 'CVE-2021-45046'],
            'cvss_score': 10.0,
            'solution': 'Update to Log4j 2.17.0 or apply recommended mitigations',
            'consequence': 'Complete system compromise possible'
        }
    ]
    
    # Combine all results
    all_scanner_results = {
        'openvas': openvas_results,
        'nessus': nessus_results,
        'qualys': qualys_results
    }
    
    print("‚úÖ Scans completed!")
    print(f"   - OpenVAS: {len(openvas_results)} vulnerabilities")
    print(f"   - Nessus: {len(nessus_results)} vulnerabilities")
    print(f"   - Qualys: {len(qualys_results)} vulnerabilities")
    print()
    
    # Correlate results
    print("üîÑ Correlating findings from multiple scanners...")
    correlated_results = correlate_scanner_results(all_scanner_results)
    
    print(f"‚úÖ Correlation complete!")
    print(f"   - Original findings: {correlated_results['summary']['original_findings']}")
    print(f"   - After deduplication: {correlated_results['summary']['total_findings']}")
    print(f"   - Deduplication ratio: {correlated_results['summary']['deduplication_ratio']:.1%}")
    print()
    
    # Calculate risk priorities
    print("üìä Calculating risk priorities...")
    prioritized_vulns = calculate_risk_priority(correlated_results)
    
    # Show top vulnerabilities
    print("\nüö® Top Priority Vulnerabilities:")
    print("-" * 80)
    
    for i, vuln in enumerate(prioritized_vulns[:5], 1):
        risk_data = vuln.get('risk_assessment', {})
        print(f"\n{i}. {vuln.get('name', 'Unknown Vulnerability')}")
        print(f"   Host: {vuln.get('host')} | Port: {vuln.get('port')}")
        print(f"   Severity: {vuln.get('severity_label')} | Risk Score: {risk_data.get('risk_score')}")
        print(f"   CVE: {', '.join(vuln.get('cve', []))}")
        print(f"   Detected by: {', '.join(vuln.get('detected_by', []))}")
        print(f"   Priority: {risk_data.get('remediation_priority')}")
        print(f"   Solution: {vuln.get('solution', 'No solution provided')[:100]}...")
    
    # Generate reports
    print("\nüìë Generating reports...")
    
    # Asset criticality for risk scoring
    asset_criticality = {
        target_host: 8  # Critical production server
    }
    
    # Environment configuration
    environment_config = {
        'internet_facing': True,
        'segmented': False,
        'access_controlled': True
    }
    
    # Generate executive report
    executive_report = generate_vulnerability_report(
        prioritized_vulns,
        format='executive',
        client_name='Demo Organization',
        asset_info=asset_criticality,
        environment_info=environment_config
    )
    
    print("\nüìä Executive Summary:")
    print("-" * 80)
    exec_summary = executive_report['executive_summary']
    print(f"Overall Risk Level: {exec_summary['overall_risk_level']}")
    print(f"Critical Findings: {exec_summary['critical_findings']}")
    print(f"Systems at Risk: {exec_summary['systems_at_risk']}")
    print(f"Estimated Remediation Effort: {exec_summary['estimated_remediation_effort']}")
    
    print("\nKey Recommendations:")
    for rec in exec_summary['key_recommendations']:
        print(f"  ‚Ä¢ {rec}")
    
    # Generate remediation plan
    print("\nüîß Remediation Plan (20 hour budget):")
    print("-" * 80)
    
    remediation_plan = prioritize_remediation(prioritized_vulns, max_effort_hours=20)
    
    total_vulns_addressed = len(remediation_plan)
    print(f"Can address {total_vulns_addressed} vulnerabilities within budget")
    print()
    
    for item in remediation_plan[:5]:
        vuln = item['vulnerability']
        print(f"‚Ä¢ {vuln.get('name', 'Unknown')}")
        print(f"  Effort: {item['effort_hours']}h | Running total: {item['cumulative_hours']}h")
        print(f"  Host: {vuln.get('host')} | Port: {vuln.get('port')}")
        print()
    
    # CVE enrichment example
    print("üìö CVE Database Enrichment Example:")
    print("-" * 80)
    
    # Look up Log4Shell in CVE database
    cve_details = search_cve_by_id('CVE-2021-44228')
    if cve_details:
        print(f"CVE: {cve_details['cve_id']}")
        print(f"Description: {cve_details['description'][:200]}...")
        print(f"CVSS Score: {cve_details.get('cvss_v3_score')}")
        print(f"Severity: {cve_details.get('severity')}")
        
        # Calculate risk score with environmental factors
        risk_result = calculate_risk_score(
            cve_details,
            asset_criticality=8,
            exposure_level=9  # Internet-facing
        )
        print(f"\nEnvironmental Risk Score: {risk_result['risk_score']}")
        print(f"Risk Level: {risk_result['risk_level']}")
        print(f"Recommendation: {risk_result['recommendation']}")
    
    # Save reports
    print("\nüíæ Saving reports...")
    
    # Save JSON report
    json_report = generate_vulnerability_report(
        prioritized_vulns,
        format='json',
        include_recommendations=True
    )
    
    with open('vulnerability_report.json', 'w') as f:
        json.dump(json_report, f, indent=2)
    print("   ‚úÖ JSON report saved to vulnerability_report.json")
    
    # Save CSV report
    csv_report = generate_vulnerability_report(
        prioritized_vulns,
        format='csv'
    )
    
    with open('vulnerability_report.csv', 'w') as f:
        f.write(csv_report)
    print("   ‚úÖ CSV report saved to vulnerability_report.csv")
    
    # Save HTML report
    html_report = generate_vulnerability_report(
        prioritized_vulns,
        format='html'
    )
    
    with open('vulnerability_report.html', 'w') as f:
        f.write(html_report)
    print("   ‚úÖ HTML report saved to vulnerability_report.html")
    
    print("\n‚ú® Vulnerability scanning demo complete!")
    
    # Show how Claude Code would interpret this
    print("\n" + "=" * 80)
    print("ü§ñ Claude Code Interpretation:")
    print("=" * 80)
    print("""
Based on the vulnerability scan results, I've identified critical security issues
that require immediate attention:

1. **Apache Log4j RCE (Log4Shell)** - CRITICAL
   - Detected by all 3 scanners with high confidence
   - Remote code execution vulnerability with active exploits
   - Affects production server on port 8080
   - ACTION: Update Log4j to version 2.17.0 immediately

2. **SSL/TLS Certificate Issues** - MEDIUM
   - Weak hashing algorithm detected
   - Affects HTTPS service on port 443
   - ACTION: Replace certificate within 30 days

3. **SSH Configuration** - MEDIUM
   - Weak key exchange algorithms enabled
   - Affects SSH service on port 22
   - ACTION: Harden SSH configuration

The deduplication process reduced 5 findings to 3 unique vulnerabilities,
showing the value of correlating multiple scanner results.

Would you like me to:
1. Generate detailed remediation scripts?
2. Create firewall rules to mitigate risks?
3. Set up continuous monitoring for these vulnerabilities?
4. Schedule follow-up scans after patching?
""")


def demonstrate_claude_code_workflow():
    """
    Show how Claude Code would orchestrate a vulnerability assessment
    based on natural language requests.
    """
    print("\n" + "=" * 80)
    print("ü§ñ Claude Code Natural Language Workflow")
    print("=" * 80)
    print()
    
    # Simulated user request
    user_request = """
    I need to scan our production web server at 192.168.1.100 for vulnerabilities.
    We're particularly concerned about Log4j issues. Can you run a comprehensive
    scan and tell me what needs immediate attention?
    """
    
    print("üë§ IT Professional:")
    print(user_request)
    print()
    
    print("ü§ñ Claude Code:")
    print("""
I'll run a comprehensive vulnerability scan on your production web server at 
192.168.1.100, with special attention to Log4j vulnerabilities.

Here's what I'll do:

1. **Multi-Scanner Approach**: I'll use OpenVAS, Nessus, and Qualys to ensure
   comprehensive coverage and reduce false positives through correlation.

2. **Focused Log4j Detection**: I'll specifically check for CVE-2021-44228 
   (Log4Shell) and related vulnerabilities.

3. **Risk Prioritization**: I'll analyze findings based on exploitability,
   your server's exposure, and potential business impact.

Let me start the scans now...

[Running vulnerability scans...]

‚úÖ **Scan Results Summary**:
- Total vulnerabilities found: 5
- After correlation and deduplication: 3 unique issues
- Critical findings: 1 (Log4j RCE)

üö® **IMMEDIATE ACTION REQUIRED**:

1. **Critical: Apache Log4j RCE (CVE-2021-44228)**
   - Risk Score: 95/100
   - All three scanners confirmed this vulnerability
   - Exploit code is publicly available
   - Your server on port 8080 is vulnerable
   
   **Action**: Update Log4j to version 2.17.0 TODAY. I can guide you through
   the update process if needed.

2. **Medium Priority Issues**:
   - Weak SSL certificate hashing (port 443)
   - SSH weak algorithms (port 22)
   
   **Action**: Schedule fixes within 7-30 days

**My Recommendations**:
1. Implement emergency change to patch Log4j immediately
2. Enable WAF rules to block Log4j exploit attempts as temporary mitigation
3. Schedule weekly vulnerability scans going forward
4. Consider network segmentation for this critical server

Would you like me to:
- Generate the specific commands to patch Log4j?
- Create temporary firewall rules for protection?
- Set up monitoring for exploitation attempts?
- Schedule the medium-priority fixes?
""")


if __name__ == "__main__":
    # Run the main demonstration
    demonstrate_vulnerability_scanning()
    
    # Show Claude Code workflow
    demonstrate_claude_code_workflow()